$layerHoverColor: #02516b;
$layerStaticColor: #008CBA;
$layerHeight: 50px;
$controlButtonHoverColor: #012b39;

.layer {
	background-color: $layerStaticColor;
	height: $layerHeight; 
	padding-right: 15px;
	margin-bottom: 5px;
	width: 470px; 
	float: left;
	display: none;
  box-shadow: 2.5px 2.5px 8px rgba( 1, 2, 0, .2);
  color: #444;
  font-size: 14px;
  // border: 1px solid rgba( 0, 0, 0, 0.2 );
  padding: 1px;
}

p {
	float:left;
	padding-top: 7px;
	padding-left: 20px;
}

.layer p {
	font-size: 1.5em;
	max-width: 150px;
	text-overflow: ellipsis;	
	overflow: hidden;
}


// DEFAULT OPTIONS

// Prefix for Hover class names
$nameSpace: 'hvr' !default;

// Durations
$fastDuration: .1s !default;
$mediumDuration: .3s !default;
$slowDuration: .5s !default;

// Colors
$primaryColor: #e1e1e1 !default;
$secondaryColor: #666 !default;
$highlightColor: #ccc !default;
$activeColor: #2098D1 !default;
$shadowColor: rgba(0, 0, 0, .6) !default;

// Speech bubbles options
$tipWidth: 10px !default;  //the width of the speech bubble tip
$tipHeight: 10px !default; //the height of the speech bubble tip
$tipColor: $primaryColor !default;

// Arrows options
$spaceBetweenTextAndArrows: 2.2em !default;

// Curl dimensions
$curlWidth: 25px !default;
$curlHeight: 25px !default;

// Curl colors
$revealAreaColor: white !default;    // reveal area behind the curl
$curlLineColor: #aaa !default;       // crease line
$curlTransitionColor: #ccc !default;	// color transitioning from crease line to final color
$curlLastColor: white !default;		// final color of the back of the curl

// Browser Prefixes - Which CSS prefixes should be used?
$webkit: true !default;
$moz: false !default;
$ms: false !default;
$o: false !default;

// Compile with or without classes
$includeClasses: true !default;


// As is often the case, some devices/browsers need additional code to get CSS to work
// in the most desired way. These mixins are used to quickly drop in hacks for each element
// Find out more here: https://github.com/IanLunn/Hover/wiki/Hacks-Explained

@mixin hardwareAccel() {
	// Improve performance on mobile/tablet devices
	@include prefixed(transform, translateZ(0));
}

@mixin improveAntiAlias() {
	// Improve aliasing on mobile/tablet devices
	box-shadow: 0 0 1px rgba(0, 0, 0, 0);
}

@mixin fontSmooth() {
	-webkit-backface-visibility: hidden;
	backface-visibility: hidden;
	-moz-osx-font-smoothing: grayscale;
}

@mixin forceBlockLevel() {
	// Transforms need to be block-level to work
	display: inline-block;
	vertical-align: middle;
}

@mixin hacks() {
	@include forceBlockLevel();
	@include hardwareAccel();
	@include improveAntiAlias();
	@include fontSmooth();
}


// prefix declarations
@mixin prefixed($property, $value) {
  @if $webkit == true {
    -webkit-#{$property}: #{$value};
  }

  @if $moz == true {
    -moz-#{$property}: #{$value};
  }

  @if $ms == true {
    -ms-#{$property}: #{$value};
  }

  @if $o == true {
    -o-#{$property}: #{$value};
  }

  #{$property}: #{$value};
}

// prefix keyframes
@mixin keyframes($name) {
  @if $webkit == true {
    @-webkit-keyframes #{$name} {
      @content;
    }
  }

  @if $moz == true {
    @-moz-keyframes #{$name} {
      @content;
    }
  }

  @if $ms == true {
    @-ms-keyframes #{$name} {
      @content;
    }
  }

  @if $o == true {
    @-o-keyframes #{$name} {
      @content;
    }
  }

  @keyframes #{$name} {
    @content;
  }
}


$mediumDuration: 0.3s;


/* Sweep To Bottom */
@mixin sweep-to-bottom {
	@include hacks();
	position: relative;
	@include prefixed(transition-property, color);
	@include prefixed(transition-duration, $mediumDuration);

	&:before {
		content: "";
		position: absolute;
		z-index: -1;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: $layerHoverColor;
		@include prefixed(transform, scaleY(0));
		@include prefixed(transform-origin, 50% 0);
		@include prefixed(transition-property, transform);
		@include prefixed(transition-duration, $mediumDuration);
		@include prefixed(transition-timing-function, ease-out);
	}

	&:hover,
	&:focus,
	&:active {
		color: white;

		&:before {
			@include prefixed(transform, scaleY(1));
		}
	}
}

.layer {
	@include sweep-to-bottom;
}


/* Icon Grow */
@mixin icon-grow {
  @include hacks();
  position: relative;
  padding-right: 0;
  @include prefixed(transition-duration, $mediumDuration);

  &:before {
    content: "";
    position: absolute;
    right: 1em;
    padding: 0 1px;
    font-family: FontAwesome;
    @include prefixed(transform, translateZ(0));
    @include prefixed(transition-duration, $mediumDuration);
    @include prefixed(transition-property, transform);
    @include prefixed(transition-timing-function, ease-out);
  }

  &:hover,
  &:focus,
  &:active {

    &:before {
      @include prefixed(transform, scale(1.3) translateZ(0));
    }
  }
}

.control-button {
	@include icon-grow;
}


/* Fade */
@mixin fade {
  @include hacks();
  overflow: hidden;
  @include prefixed(transition-duration, $slowDuration);
  @include prefixed(transition-property, "color, background-color");

  &:hover,
  &:focus,
  &:active {
    background-color: $controlButtonHoverColor;
    color: white;
  }
}

.control-button {
	@include fade;
}